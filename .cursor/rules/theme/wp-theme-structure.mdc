---
description: Guidelines for WordPress theme structure and organization
globs: **/*.php,**/*.css,**/*.scss,**/*.js,**/theme.json
alwaysApply: false
---
# WordPress Theme Structure and Organization Guidelines

You're a WordPress theme development expert. Generate code that properly implements WordPress theme structure and organization following best practices.

## General Guidelines

1. **Template Hierarchy:**
   - Follow WordPress template hierarchy order
   - Use appropriate template files for different content types
   - Implement template parts for reusable components
   - Consider template hierarchy for custom post types
   - Use template fallbacks correctly

2. **Theme File Organization:**
   - Organize files by function and purpose
   - Use consistent naming conventions
   - Separate template parts from main templates
   - Group related functionality
   - Follow WordPress standards for file naming

3. **Child Theme Compatibility:**
   - Design parent themes with extensibility in mind
   - Use proper hooks and filters
   - Implement proper template loading
   - Consider asset loading in child themes
   - Document overridable components

4. **Theme Features Registration:**
   - Register theme features in the appropriate hook
   - Use proper feature registration functions
   - Implement required theme features
   - Consider backward compatibility
   - Document supported features

## Code Examples

### Basic Theme Structure
```
theme-name/
├── assets/
│   ├── css/
│   │   ├── style.css
│   │   └── editor-style.css
│   ├── js/
│   │   ├── navigation.js
│   │   └── customizer.js
│   ├── images/
│   │   └── logo.png
│   └── fonts/
│       └── font-awesome/
├── inc/
│   ├── template-tags.php
│   ├── template-functions.php
│   ├── customizer.php
│   └── class-theme-name-walker-nav-menu.php
├── languages/
│   └── theme-name.pot
├── template-parts/
│   ├── content/
│   │   ├── content.php
│   │   ├── content-page.php
│   │   └── content-none.php
│   ├── header/
│   │   ├── header-default.php
│   │   └── header-minimal.php
│   └── footer/
│       ├── footer-default.php
│       └── footer-minimal.php
├── 404.php
├── archive.php
├── comments.php
├── footer.php
├── front-page.php
├── functions.php
├── header.php
├── index.php
├── page.php
├── search.php
├── sidebar.php
├── single.php
├── style.css
└── readme.txt
```

### Theme Setup and Features Registration
```php
/**
 * Sets up theme defaults and registers support for various WordPress features.
 *
 * @return void
 */
function theme_name_setup() {
    /*
     * Make theme available for translation.
     * Translations can be filed in the /languages/ directory.
     */
    load_theme_textdomain( 'theme-name', get_template_directory() . '/languages' );

    // Add default posts and comments RSS feed links to head.
    add_theme_support( 'automatic-feed-links' );

    /*
     * Let WordPress manage the document title.
     * By adding theme support, we declare that this theme does not use a
     * hard-coded <title> tag in the document head, and expect WordPress to
     * provide it for us.
     */
    add_theme_support( 'title-tag' );

    /*
     * Enable support for Post Thumbnails on posts and pages.
     *
     * @link https://developer.wordpress.org/themes/functionality/featured-images-post-thumbnails/
     */
    add_theme_support( 'post-thumbnails' );

    // Set default Post Thumbnail size
    set_post_thumbnail_size( 1200, 9999 );

    // Add custom image sizes
    add_image_size( 'theme-name-featured', 1600, 900, true );
    add_image_size( 'theme-name-thumbnail', 600, 400, true );

    // Register navigation menus
    register_nav_menus(
        array(
            'primary' => esc_html__( 'Primary Menu', 'theme-name' ),
            'footer'  => esc_html__( 'Footer Menu', 'theme-name' ),
            'social'  => esc_html__( 'Social Links Menu', 'theme-name' ),
        )
    );

    /*
     * Switch default core markup for search form, comment form, and comments
     * to output valid HTML5.
     */
    add_theme_support(
        'html5',
        array(
            'search-form',
            'comment-form',
            'comment-list',
            'gallery',
            'caption',
            'style',
            'script',
        )
    );

    // Set up the WordPress core custom background feature.
    add_theme_support(
        'custom-background',
        apply_filters(
            'theme_name_custom_background_args',
            array(
                'default-color' => 'ffffff',
                'default-image' => '',
            )
        )
    );

    // Add theme support for selective refresh for widgets.
    add_theme_support( 'customize-selective-refresh-widgets' );

    /**
     * Add support for core custom logo.
     *
     * @link https://codex.wordpress.org/Theme_Logo
     */
    add_theme_support(
        'custom-logo',
        array(
            'height'      => 250,
            'width'       => 250,
            'flex-width'  => true,
            'flex-height' => true,
        )
    );

    // Add support for editor styles
    add_theme_support( 'editor-styles' );

    // Enqueue editor styles
    add_editor_style( 'assets/css/editor-style.css' );

    // Add support for responsive embeds
    add_theme_support( 'responsive-embeds' );

    // Add support for full and wide align images
    add_theme_support( 'align-wide' );
}
add_action( 'after_setup_theme', 'theme_name_setup' );
```

### Template Hierarchy Implementation
```php
<?php
/**
 * The template for displaying archive pages
 *
 * @link https://developer.wordpress.org/themes/basics/template-hierarchy/
 *
 * @package Theme_Name
 */

get_header();
?>

    <main id="primary" class="site-main">

        <?php if ( have_posts() ) : ?>

            <header class="page-header">
                <?php
                the_archive_title( '<h1 class="page-title">', '</h1>' );
                the_archive_description( '<div class="archive-description">', '</div>' );
                ?>
            </header><!-- .page-header -->

            <?php
            /* Start the Loop */
            while ( have_posts() ) :
                the_post();

                /*
                 * Include the Post-Type-specific template for the content.
                 * If you want to override this in a child theme, then include a file
                 * called content-___.php (where ___ is the Post Type name) and that will be used instead.
                 */
                get_template_part( 'template-parts/content/content', get_post_type() );

            endwhile;

            the_posts_navigation();

        else :

            get_template_part( 'template-parts/content/content', 'none' );

        endif;
        ?>

    </main><!-- #primary -->

<?php
get_sidebar();
get_footer();
```

### Template Part Example
```php
<?php
/**
 * Template part for displaying posts
 *
 * @link https://developer.wordpress.org/themes/basics/template-hierarchy/
 *
 * @package Theme_Name
 */

?>

<article id="post-<?php the_ID(); ?>" <?php post_class(); ?>>
    <header class="entry-header">
        <?php
        if ( is_singular() ) :
            the_title( '<h1 class="entry-title">', '</h1>' );
        else :
            the_title( '<h2 class="entry-title"><a href="' . esc_url( get_permalink() ) . '" rel="bookmark">', '</a></h2>' );
        endif;

        if ( 'post' === get_post_type() ) :
            ?>
            <div class="entry-meta">
                <?php
                theme_name_posted_on();
                theme_name_posted_by();
                ?>
            </div><!-- .entry-meta -->
        <?php endif; ?>
    </header><!-- .entry-header -->

    <?php theme_name_post_thumbnail(); ?>

    <div class="entry-content">
        <?php
        if ( is_singular() ) :
            the_content(
                sprintf(
                    wp_kses(
                        /* translators: %s: Name of current post. Only visible to screen readers */
                        __( 'Continue reading<span class="screen-reader-text"> "%s"</span>', 'theme-name' ),
                        array(
                            'span' => array(
                                'class' => array(),
                            ),
                        )
                    ),
                    wp_kses_post( get_the_title() )
                )
            );

            wp_link_pages(
                array(
                    'before' => '<div class="page-links">' . esc_html__( 'Pages:', 'theme-name' ),
                    'after'  => '</div>',
                )
            );
        else :
            the_excerpt();
            ?>
            <a href="<?php echo esc_url( get_permalink() ); ?>" class="read-more">
                <?php esc_html_e( 'Read More', 'theme-name' ); ?>
            </a>
        <?php endif; ?>
    </div><!-- .entry-content -->

    <footer class="entry-footer">
        <?php theme_name_entry_footer(); ?>
    </footer><!-- .entry-footer -->
</article><!-- #post-<?php the_ID(); ?> -->
```

### Child Theme Implementation
```php
<?php
/**
 * Functions and definitions for the child theme
 *
 * @package Theme_Name_Child
 */

/**
 * Enqueue parent and child theme styles.
 *
 * @return void
 */
function theme_name_child_enqueue_styles() {
    $parent_style = 'theme-name-style';

    // Enqueue parent theme's style.css
    wp_enqueue_style(
        $parent_style,
        get_template_directory_uri() . '/style.css',
        array(),
        wp_get_theme( 'theme-name' )->get( 'Version' )
    );

    // Enqueue child theme's style.css
    wp_enqueue_style(
        'theme-name-child-style',
        get_stylesheet_directory_uri() . '/style.css',
        array( $parent_style ),
        wp_get_theme()->get( 'Version' )
    );

    // Enqueue child theme's custom scripts
    wp_enqueue_script(
        'theme-name-child-script',
        get_stylesheet_directory_uri() . '/assets/js/custom.js',
        array( 'jquery' ),
        wp_get_theme()->get( 'Version' ),
        true
    );
}
add_action( 'wp_enqueue_scripts', 'theme_name_child_enqueue_styles' );

/**
 * Add custom functionality for the child theme.
 *
 * @return void
 */
function theme_name_child_setup() {
    // Add child theme specific features here
}
add_action( 'after_setup_theme', 'theme_name_child_setup', 11 ); // Priority 11 to run after parent theme setup
```

### Child Theme Style.css
```css
/*
Theme Name: Theme Name Child
Theme URI: https://example.com/theme-name-child/
Description: Child theme for Theme Name
Author: Your Name
Author URI: https://example.com/
Template: theme-name
Version: 1.0.0
License: GNU General Public License v2 or later
License URI: http://www.gnu.org/licenses/gpl-2.0.html
Text Domain: theme-name-child
*/

/* 
 * Add your custom styles here.
 * These will override the parent theme's styles.
 */

/* Example of overriding a parent theme style */
.site-header {
    background-color: #f8f8f8;
    padding: 20px 0;
}

.entry-title {
    color: #333;
    font-size: 2.5rem;
}

/* Add more custom styles as needed */
```

### Sidebar Registration
```php
/**
 * Register widget area.
 *
 * @link https://developer.wordpress.org/themes/functionality/sidebars/#registering-a-sidebar
 * @return void
 */
function theme_name_widgets_init() {
    register_sidebar(
        array(
            'name'          => esc_html__( 'Sidebar', 'theme-name' ),
            'id'            => 'sidebar-1',
            'description'   => esc_html__( 'Add widgets here to appear in your sidebar.', 'theme-name' ),
            'before_widget' => '<section id="%1$s" class="widget %2$s">',
            'after_widget'  => '</section>',
            'before_title'  => '<h2 class="widget-title">',
            'after_title'   => '</h2>',
        )
    );

    register_sidebar(
        array(
            'name'          => esc_html__( 'Footer 1', 'theme-name' ),
            'id'            => 'footer-1',
            'description'   => esc_html__( 'Add widgets here to appear in footer column 1.', 'theme-name' ),
            'before_widget' => '<section id="%1$s" class="widget %2$s">',
            'after_widget'  => '</section>',
            'before_title'  => '<h2 class="widget-title">',
            'after_title'   => '</h2>',
        )
    );

    register_sidebar(
        array(
            'name'          => esc_html__( 'Footer 2', 'theme-name' ),
            'id'            => 'footer-2',
            'description'   => esc_html__( 'Add widgets here to appear in footer column 2.', 'theme-name' ),
            'before_widget' => '<section id="%1$s" class="widget %2$s">',
            'after_widget'  => '</section>',
            'before_title'  => '<h2 class="widget-title">',
            'after_title'   => '</h2>',
        )
    );

    register_sidebar(
        array(
            'name'          => esc_html__( 'Footer 3', 'theme-name' ),
            'id'            => 'footer-3',
            'description'   => esc_html__( 'Add widgets here to appear in footer column 3.', 'theme-name' ),
            'before_widget' => '<section id="%1$s" class="widget %2$s">',
            'after_widget'  => '</section>',
            'before_title'  => '<h2 class="widget-title">',
            'after_title'   => '</h2>',
        )
    );
}
add_action( 'widgets_init', 'theme_name_widgets_init' );
```

### Navigation Menu Implementation
```php
<?php
/**
 * Display primary navigation menu
 *
 * @return void
 */
function theme_name_primary_menu() {
    if ( has_nav_menu( 'primary' ) ) {
        wp_nav_menu(
            array(
                'theme_location' => 'primary',
                'menu_id'        => 'primary-menu',
                'menu_class'     => 'primary-menu',
                'container'      => 'nav',
                'container_class' => 'main-navigation',
                'container_id'   => 'site-navigation',
                'depth'          => 2,
                'fallback_cb'    => false,
            )
        );
    } else {
        ?>
        <nav id="site-navigation" class="main-navigation">
            <ul id="primary-menu" class="primary-menu">
                <li><a href="<?php echo esc_url( admin_url( 'nav-menus.php' ) ); ?>"><?php esc_html_e( 'Add a menu', 'theme-name' ); ?></a></li>
            </ul>
        </nav>
        <?php
    }
}

/**
 * Display social links menu
 *
 * @return void
 */
function theme_name_social_menu() {
    if ( has_nav_menu( 'social' ) ) {
        wp_nav_menu(
            array(
                'theme_location' => 'social',
                'menu_id'        => 'social-menu',
                'menu_class'     => 'social-links-menu',
                'container'      => 'nav',
                'container_class' => 'social-navigation',
                'link_before'    => '<span class="screen-reader-text">',
                'link_after'     => '</span>',
                'depth'          => 1,
                'fallback_cb'    => false,
            )
        );
    }
}

/**
 * Custom walker class for nav menu with additional features
 */
class Theme_Name_Walker_Nav_Menu extends Walker_Nav_Menu {
    /**
     * Starts the element output.
     *
     * @param string   $output Used to append additional content (passed by reference).
     * @param WP_Post  $item   Menu item data object.
     * @param int      $depth  Depth of menu item.
     * @param stdClass $args   An object of wp_nav_menu() arguments.
     * @param int      $id     Current item ID.
     */
    public function start_el( &$output, $item, $depth = 0, $args = null, $id = 0 ) {
        if ( isset( $args->item_spacing ) && 'discard' === $args->item_spacing ) {
            $t = '';
            $n = '';
        } else {
            $t = "\t";
            $n = "\n";
        }
        $indent = ( $depth ) ? str_repeat( $t, $depth ) : '';

        $classes   = empty( $item->classes ) ? array() : (array) $item->classes;
        $classes[] = 'menu-item-' . $item->ID;

        // Add class for menu items with children
        if ( in_array( 'menu-item-has-children', $classes, true ) ) {
            $classes[] = 'has-dropdown';
        }

        /**
         * Filters the arguments for a single nav menu item.
         *
         * @param stdClass $args  An object of wp_nav_menu() arguments.
         * @param WP_Post  $item  Menu item data object.
         * @param int      $depth Depth of menu item.
         */
        $args = apply_filters( 'nav_menu_item_args', $args, $item, $depth );

        /**
         * Filters the CSS classes applied to a menu item's list item element.
         *
         * @param string[] $classes Array of the CSS classes that are applied to the menu item's <li> element.
         * @param WP_Post  $item    The current menu item.
         * @param stdClass $args    An object of wp_nav_menu() arguments.
         * @param int      $depth   Depth of menu item.
         */
        $class_names = implode( ' ', apply_filters( 'nav_menu_css_class', array_filter( $classes ), $item, $args, $depth ) );
        $class_names = $class_names ? ' class="' . esc_attr( $class_names ) . '"' : '';

        /**
         * Filters the ID applied to a menu item's list item element.
         *
         * @param string   $menu_id The ID that is applied to the menu item's <li> element.
         * @param WP_Post  $item    The current menu item.
         * @param stdClass $args    An object of wp_nav_menu() arguments.
         * @param int      $depth   Depth of menu item.
         */
        $id = apply_filters( 'nav_menu_item_id', 'menu-item-' . $item->ID, $item, $args, $depth );
        $id = $id ? ' id="' . esc_attr( $id ) . '"' : '';

        $output .= $indent . '<li' . $id . $class_names . '>';

        $atts           = array();
        $atts['title']  = ! empty( $item->attr_title ) ? $item->attr_title : '';
        $atts['target'] = ! empty( $item->target ) ? $item->target : '';
        if ( '_blank' === $item->target && empty( $item->xfn ) ) {
            $atts['rel'] = 'noopener';
        } else {
            $atts['rel'] = $item->xfn;
        }
        $atts['href']         = ! empty( $item->url ) ? $item->url : '';
        $atts['aria-current'] = $item->current ? 'page' : '';

        /**
         * Filters the HTML attributes applied to a menu item's anchor element.
         *
         * @param array $atts {
         *     The HTML attributes applied to the menu item's <a> element, empty strings are ignored.
         *
         *     @type string $title        Title attribute.
         *     @type string $target       Target attribute.
         *     @type string $rel          The rel attribute.
         *     @type string $href         The href attribute.
         *     @type string $aria-current The aria-current attribute.
         * }
         * @param WP_Post  $item  The current menu item.
         * @param stdClass $args  An object of wp_nav_menu() arguments.
         * @param int      $depth Depth of menu item.
         */
        $atts = apply_filters( 'nav_menu_link_attributes', $atts, $item, $args, $depth );

        $attributes = '';
        foreach ( $atts as $attr => $value ) {
            if ( is_scalar( $value ) && '' !== $value && false !== $value ) {
                $value       = ( 'href' === $attr ) ? esc_url( $value ) : esc_attr( $value );
                $attributes .= ' ' . $attr . '="' . $value . '"';
            }
        }

        /** This filter is documented in wp-includes/post-template.php */
        $title = apply_filters( 'the_title', $item->title, $item->ID );

        /**
         * Filters a menu item's title.
         *
         * @param string   $title The menu item's title.
         * @param WP_Post  $item  The current menu item.
         * @param stdClass $args  An object of wp_nav_menu() arguments.
         * @param int      $depth Depth of menu item.
         */
        $title = apply_filters( 'nav_menu_item_title', $title, $item, $args, $depth );

        $item_output  = $args->before;
        $item_output .= '<a' . $attributes . '>';
        $item_output .= $args->link_before . $title . $args->link_after;
        $item_output .= '</a>';
        
        // Add dropdown toggle button for items with children
        if ( in_array( 'menu-item-has-children', $classes, true ) ) {
            $item_output .= '<button class="dropdown-toggle" aria-expanded="false"><span class="screen-reader-text">' . esc_html__( 'Expand child menu', 'theme-name' ) . '</span></button>';
        }
        
        $item_output .= $args->after;

        /**
         * Filters a menu item's starting output.
         *
         * @param string   $item_output The menu item's starting HTML output.
         * @param WP_Post  $item        Menu item data object.
         * @param int      $depth       Depth of menu item.
         * @param stdClass $args        An object of wp_nav_menu() arguments.
         */
        $output .= apply_filters( 'walker_nav_menu_start_el', $item_output, $item, $depth, $args );
    }
}
```