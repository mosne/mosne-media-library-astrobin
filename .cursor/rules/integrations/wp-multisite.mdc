---
description: Guidelines for WordPress multisite development
globs: **/*.php
alwaysApply: false
---
# WordPress Multisite Development Guidelines

You're a WordPress multisite development expert. Generate high-quality code that follows best practices for implementing features in WordPress multisite environments.

## General Guidelines

1. **Network vs. Site Specific:**
   - Determine appropriate scope (network-wide or site-specific)
   - Use proper capability checks
   - Implement proper database access
   - Consider data separation

2. **Plugin Development:**
   - Use network activation when appropriate
   - Handle site creation/deletion events
   - Implement proper database tables
   - Consider scalability

3. **Theme Development:**
   - Handle network-enabled themes
   - Implement proper customization options
   - Consider child themes
   - Handle domain mapping

## Code Examples

### Network Admin Menu
```php
/**
 * Add network admin menu
 */
function prefix_network_admin_menu() {
    add_menu_page(
        __('Network Settings', 'textdomain'),
        __('Network Settings', 'textdomain'),
        'manage_network_options',
        'network-settings',
        'prefix_network_settings_page',
        'dashicons-admin-network',
        20
    );
}
add_action('network_admin_menu', 'prefix_network_admin_menu');

/**
 * Network settings page callback
 */
function prefix_network_settings_page() {
    if (!current_user_can('manage_network_options')) {
        wp_die(__('You do not have sufficient permissions to access this page.', 'textdomain'));
    }
    
    // Settings page content
    ?>
    <div class="wrap">
        <h1><?php echo esc_html(get_admin_page_title()); ?></h1>
        <form method="post" action="edit.php?action=prefix_update_network_options">
            <?php wp_nonce_field('prefix_network_options'); ?>
            <!-- Form fields -->
            <table class="form-table">
                <tr>
                    <th scope="row"><?php esc_html_e('Network Option', 'textdomain'); ?></th>
                    <td>
                        <input type="text" name="network_option" value="<?php echo esc_attr(get_site_option('network_option')); ?>" />
                    </td>
                </tr>
            </table>
            <?php submit_button(); ?>
        </form>
    </div>
    <?php
}

/**
 * Handle network options update
 */
function prefix_update_network_options() {
    if (!current_user_can('manage_network_options')) {
        wp_die(__('You do not have sufficient permissions to access this page.', 'textdomain'));
    }
    
    check_admin_referer('prefix_network_options');
    
    if (isset($_POST['network_option'])) {
        update_site_option('network_option', sanitize_text_field($_POST['network_option']));
    }
    
    wp_redirect(network_admin_url('admin.php?page=network-settings&updated=true'));
    exit;
}
add_action('network_admin_edit_prefix_update_network_options', 'prefix_update_network_options');
```

### Site Creation Hook
```php
/**
 * Handle new site creation
 *
 * @param int    $blog_id Blog ID.
 * @param int    $user_id User ID.
 * @param string $domain  Site domain.
 * @param string $path    Site path.
 * @param int    $site_id Site ID. Only relevant on multi-network installs.
 * @param array  $meta    Meta data. Used to set initial site options.
 */
function prefix_new_site_setup($blog_id, $user_id, $domain, $path, $site_id, $meta) {
    // Switch to the new blog
    switch_to_blog($blog_id);
    
    // Set up default options
    update_option('theme_option', 'default_value');
    
    // Activate plugins
    activate_plugin('essential-plugin/essential-plugin.php');
    
    // Switch back to the current blog
    restore_current_blog();
}
add_action('wpmu_new_blog', 'prefix_new_site_setup', 10, 6);
```

### Network-Wide Plugin Activation
```php
/**
 * Network activation hook
 */
function prefix_network_activate() {
    if (!is_multisite()) {
        return;
    }
    
    global $wpdb;
    
    // Get all blog ids
    $blog_ids = $wpdb->get_col("SELECT blog_id FROM $wpdb->blogs");
    
    foreach ($blog_ids as $blog_id) {
        switch_to_blog($blog_id);
        prefix_activate();
        restore_current_blog();
    }
}
register_activation_hook(__FILE__, 'prefix_network_activate');

/**
 * Single site activation
 */
function prefix_activate() {
    // Create tables, set options, etc.
    add_option('plugin_option', 'default_value');
}
```

### Network Database Table
```php
/**
 * Create network-wide database table
 */
function prefix_create_network_table() {
    global $wpdb;
    
    $table_name = $wpdb->base_prefix . 'network_data';
    
    if ($wpdb->get_var("SHOW TABLES LIKE '$table_name'") != $table_name) {
        $charset_collate = $wpdb->get_charset_collate();
        
        $sql = "CREATE TABLE $table_name (
            id bigint(20) NOT NULL AUTO_INCREMENT,
            site_id bigint(20) NOT NULL,
            data_key varchar(255) NOT NULL,
            data_value longtext NOT NULL,
            created datetime DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY  (id),
            KEY site_id (site_id),
            KEY data_key (data_key)
        ) $charset_collate;";
        
        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
        dbDelta($sql);
    }
}
register_activation_hook(__FILE__, 'prefix_create_network_table');
```

### Check if Network Active
```php
/**
 * Check if plugin is network active
 *
 * @return bool True if plugin is network active, false otherwise.
 */
function prefix_is_plugin_network_active() {
    if (!function_exists('is_plugin_active_for_network')) {
        require_once(ABSPATH . '/wp-admin/includes/plugin.php');
    }
    
    return is_plugin_active_for_network(plugin_basename(__FILE__));
}

// Usage example
if (prefix_is_plugin_network_active()) {
    // Do something for network active plugins
} else {
    // Do something for single site active plugins
}
```

### Site Specific vs Network Settings
```php
/**
 * Get option with network fallback
 *
 * @param string $option_name Option name.
 * @param mixed  $default     Default value.
 * @return mixed Option value.
 */
function prefix_get_option_with_network_fallback($option_name, $default = false) {
    // Try to get the option from the current site
    $option = get_option($option_name, null);
    
    // If the option doesn't exist, try to get it from the network
    if (null === $option && is_multisite()) {
        $option = get_site_option($option_name, $default);
    } else if (null === $option) {
        $option = $default;
    }
    
    return $option;
}
```