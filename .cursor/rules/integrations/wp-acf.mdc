---
description: Guidelines for Advanced Custom Fields (ACF) integration in WordPress
globs: **/*.php,**/acf-json/**
alwaysApply: false
---
# WordPress ACF Integration Guidelines

You're a WordPress ACF integration expert. Generate high-quality code that follows best practices for implementing Advanced Custom Fields in WordPress projects.

## General Guidelines

1. **Field Group Organization:**
   - Use logical field group naming
   - Organize fields in tabs for complex groups
   - Use conditional logic appropriately
   - Save field groups as JSON

2. **Field Registration:**
   - Register fields programmatically when appropriate
   - Use local JSON for version control
   - Follow naming conventions
   - Document field usage

3. **Field Usage:**
   - Use proper field retrieval functions
   - Implement caching for repeated field access
   - Sanitize and escape field values
   - Handle empty field values gracefully

## Code Examples

### Programmatic Field Registration
```php
add_action('acf/init', 'prefix_register_acf_fields');
function prefix_register_acf_fields() {
    if (function_exists('acf_add_local_field_group')) {
        acf_add_local_field_group([
            'key' => 'group_page_settings',
            'title' => 'Page Settings',
            'fields' => [
                [
                    'key' => 'field_page_subtitle',
                    'label' => 'Subtitle',
                    'name' => 'page_subtitle',
                    'type' => 'text',
                    'instructions' => 'Enter a subtitle for this page',
                    'required' => 0,
                ],
                [
                    'key' => 'field_page_background',
                    'label' => 'Background Image',
                    'name' => 'page_background',
                    'type' => 'image',
                    'return_format' => 'array',
                    'preview_size' => 'medium',
                    'library' => 'all',
                ],
            ],
            'location' => [
                [
                    [
                        'param' => 'post_type',
                        'operator' => '==',
                        'value' => 'page',
                    ],
                ],
            ],
            'menu_order' => 0,
            'position' => 'normal',
            'style' => 'default',
            'label_placement' => 'top',
            'instruction_placement' => 'label',
            'hide_on_screen' => '',
            'active' => true,
            'description' => '',
            'show_in_rest' => 0,
        ]);
    }
}
```

### Field Retrieval with Caching
```php
/**
 * Get ACF field value with caching
 *
 * @param string $field_name The field name.
 * @param int    $post_id    The post ID (optional).
 * @param bool   $format     Whether to apply formatting (optional).
 * @return mixed The field value.
 */
function prefix_get_field_cached($field_name, $post_id = false, $format = true) {
    // Set default post ID if not provided
    if (!$post_id) {
        $post_id = get_the_ID();
    }
    
    // Create a unique cache key
    $cache_key = 'acf_' . $post_id . '_' . $field_name;
    
    // Check if the value is already cached
    $cached_value = wp_cache_get($cache_key, 'acf_fields');
    
    if (false !== $cached_value) {
        return $cached_value;
    }
    
    // Get the field value
    $value = get_field($field_name, $post_id, $format);
    
    // Cache the value
    wp_cache_set($cache_key, $value, 'acf_fields');
    
    return $value;
}
```

### Flexible Content Handling
```php
<?php
// Check if the flexible content field has rows
if (have_rows('content_blocks')) :
    // Loop through the rows
    while (have_rows('content_blocks')) : the_row();
        
        // Get the layout name
        $layout = get_row_layout();
        
        // Include the appropriate template part based on layout
        get_template_part('template-parts/blocks/' . $layout);
        
    endwhile;
endif;
```

### Options Page Integration
```php
// Register ACF options page
if (function_exists('acf_add_options_page')) {
    acf_add_options_page([
        'page_title' => 'Theme Settings',
        'menu_title' => 'Theme Settings',
        'menu_slug' => 'theme-settings',
        'capability' => 'manage_options',
        'redirect' => false,
    ]);
    
    acf_add_options_sub_page([
        'page_title' => 'Header Settings',
        'menu_title' => 'Header',
        'parent_slug' => 'theme-settings',
    ]);
    
    acf_add_options_sub_page([
        'page_title' => 'Footer Settings',
        'menu_title' => 'Footer',
        'parent_slug' => 'theme-settings',
    ]);
}
```

### Block Registration with ACF
```php
// Register ACF Blocks
add_action('acf/init', 'prefix_register_acf_blocks');
function prefix_register_acf_blocks() {
    if (function_exists('acf_register_block_type')) {
        acf_register_block_type([
            'name' => 'testimonial',
            'title' => __('Testimonial', 'theme'),
            'description' => __('A custom testimonial block.', 'theme'),
            'render_template' => 'template-parts/blocks/testimonial/testimonial.php',
            'category' => 'formatting',
            'icon' => 'admin-comments',
            'keywords' => ['testimonial', 'quote'],
            'supports' => [
                'align' => true,
                'mode' => false,
                'jsx' => true,
            ],
        ]);
    }
}
```