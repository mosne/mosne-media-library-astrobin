---
description: Guidelines for WordPress Core API usage patterns
globs: **/*.php
alwaysApply: false
---
# WordPress Core API Usage Guidelines

You're a WordPress Core API expert. Generate code that properly implements WordPress Core APIs following best practices and usage patterns.

## General Guidelines

1. **Post API:**
   - Use proper post retrieval functions
   - Implement post meta correctly
   - Follow post type registration best practices
   - Use appropriate post status handling
   - Implement proper post query patterns

2. **Taxonomy API:**
   - Use proper taxonomy registration
   - Implement term relationships correctly
   - Follow taxonomy query best practices
   - Use appropriate term meta handling
   - Implement proper term hierarchy

3. **User API:**
   - Use proper user retrieval functions
   - Implement user meta correctly
   - Follow capability checking best practices
   - Use appropriate authentication patterns
   - Implement proper user query patterns

4. **Options API:**
   - Use proper option functions
   - Implement transients correctly
   - Follow option naming conventions
   - Use appropriate serialization
   - Implement proper option autoloading

5. **File System API:**
   - Use WP_Filesystem for file operations
   - Implement proper file permissions
   - Follow file path best practices
   - Use appropriate file handling functions
   - Implement proper error handling

6. **HTTP API:**
   - Use wp_remote_* functions for requests
   - Implement proper request validation
   - Follow response handling best practices
   - Use appropriate caching mechanisms
   - Implement proper error handling

## Code Examples

### Post Retrieval and Manipulation
```php
/**
 * Retrieves and processes a post.
 *
 * @param int $post_id The post ID.
 * @return array|WP_Error Post data on success, WP_Error on failure.
 */
function prefix_get_processed_post( $post_id ) {
    // Get post by ID
    $post = get_post( $post_id );
    
    // Check if post exists
    if ( ! $post ) {
        return new WP_Error( 'invalid_post', __( 'Post not found.', 'textdomain' ) );
    }
    
    // Check post type
    if ( 'post' !== $post->post_type ) {
        return new WP_Error( 'invalid_post_type', __( 'Invalid post type.', 'textdomain' ) );
    }
    
    // Get post meta
    $featured = get_post_meta( $post_id, 'featured', true );
    
    // Process post data
    $processed_data = array(
        'id'        => $post->ID,
        'title'     => get_the_title( $post ),
        'content'   => apply_filters( 'the_content', $post->post_content ),
        'excerpt'   => get_the_excerpt( $post ),
        'permalink' => get_permalink( $post ),
        'featured'  => ! empty( $featured ),
        'author'    => get_the_author_meta( 'display_name', $post->post_author ),
        'date'      => get_the_date( 'Y-m-d', $post ),
    );
    
    return $processed_data;
}
```

### Custom Post Type Registration
```php
/**
 * Register custom post types.
 *
 * @return void
 */
function prefix_register_post_types() {
    // Register the 'product' post type
    register_post_type(
        'product',
        array(
            'labels'              => array(
                'name'               => _x( 'Products', 'post type general name', 'textdomain' ),
                'singular_name'      => _x( 'Product', 'post type singular name', 'textdomain' ),
                'menu_name'          => _x( 'Products', 'admin menu', 'textdomain' ),
                'name_admin_bar'     => _x( 'Product', 'add new on admin bar', 'textdomain' ),
                'add_new'            => _x( 'Add New', 'product', 'textdomain' ),
                'add_new_item'       => __( 'Add New Product', 'textdomain' ),
                'new_item'           => __( 'New Product', 'textdomain' ),
                'edit_item'          => __( 'Edit Product', 'textdomain' ),
                'view_item'          => __( 'View Product', 'textdomain' ),
                'all_items'          => __( 'All Products', 'textdomain' ),
                'search_items'       => __( 'Search Products', 'textdomain' ),
                'parent_item_colon'  => __( 'Parent Products:', 'textdomain' ),
                'not_found'          => __( 'No products found.', 'textdomain' ),
                'not_found_in_trash' => __( 'No products found in Trash.', 'textdomain' ),
            ),
            'public'              => true,
            'hierarchical'        => false,
            'show_ui'             => true,
            'show_in_menu'        => true,
            'show_in_nav_menus'   => true,
            'show_in_admin_bar'   => true,
            'menu_position'       => 5,
            'menu_icon'           => 'dashicons-cart',
            'capability_type'     => 'post',
            'supports'            => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'comments' ),
            'has_archive'         => true,
            'rewrite'             => array( 'slug' => 'products' ),
            'query_var'           => true,
            'show_in_rest'        => true,
            'rest_base'           => 'products',
            'rest_controller_class' => 'WP_REST_Posts_Controller',
        )
    );
}
add_action( 'init', 'prefix_register_post_types' );
```

### Taxonomy Registration and Usage
```php
/**
 * Register custom taxonomies.
 *
 * @return void
 */
function prefix_register_taxonomies() {
    // Register the 'product_category' taxonomy
    register_taxonomy(
        'product_category',
        'product',
        array(
            'labels'            => array(
                'name'              => _x( 'Product Categories', 'taxonomy general name', 'textdomain' ),
                'singular_name'     => _x( 'Product Category', 'taxonomy singular name', 'textdomain' ),
                'search_items'      => __( 'Search Product Categories', 'textdomain' ),
                'all_items'         => __( 'All Product Categories', 'textdomain' ),
                'parent_item'       => __( 'Parent Product Category', 'textdomain' ),
                'parent_item_colon' => __( 'Parent Product Category:', 'textdomain' ),
                'edit_item'         => __( 'Edit Product Category', 'textdomain' ),
                'update_item'       => __( 'Update Product Category', 'textdomain' ),
                'add_new_item'      => __( 'Add New Product Category', 'textdomain' ),
                'new_item_name'     => __( 'New Product Category Name', 'textdomain' ),
                'menu_name'         => __( 'Product Categories', 'textdomain' ),
            ),
            'hierarchical'      => true,
            'show_ui'           => true,
            'show_admin_column' => true,
            'query_var'         => true,
            'rewrite'           => array( 'slug' => 'product-category' ),
            'show_in_rest'      => true,
        )
    );
}
add_action( 'init', 'prefix_register_taxonomies' );

/**
 * Get products by category.
 *
 * @param string $category_slug The category slug.
 * @param int    $limit         Optional. Number of posts to retrieve. Default 10.
 * @return array Array of product posts.
 */
function prefix_get_products_by_category( $category_slug, $limit = 10 ) {
    $args = array(
        'post_type'      => 'product',
        'posts_per_page' => $limit,
        'tax_query'      => array(
            array(
                'taxonomy' => 'product_category',
                'field'    => 'slug',
                'terms'    => $category_slug,
            ),
        ),
    );
    
    $query = new WP_Query( $args );
    
    return $query->posts;
}
```

### User Management
```php
/**
 * Get user data with meta.
 *
 * @param int $user_id The user ID.
 * @return array|WP_Error User data on success, WP_Error on failure.
 */
function prefix_get_user_data( $user_id ) {
    // Get user
    $user = get_userdata( $user_id );
    
    // Check if user exists
    if ( ! $user ) {
        return new WP_Error( 'invalid_user', __( 'User not found.', 'textdomain' ) );
    }
    
    // Check capabilities
    if ( ! current_user_can( 'edit_user', $user_id ) ) {
        return new WP_Error( 'permission_denied', __( 'You do not have permission to access this user data.', 'textdomain' ) );
    }
    
    // Get user meta
    $phone = get_user_meta( $user_id, 'phone', true );
    $address = get_user_meta( $user_id, 'address', true );
    
    // Process user data
    $user_data = array(
        'id'         => $user->ID,
        'username'   => $user->user_login,
        'email'      => $user->user_email,
        'first_name' => $user->first_name,
        'last_name'  => $user->last_name,
        'phone'      => $phone,
        'address'    => $address,
        'roles'      => $user->roles,
    );
    
    return $user_data;
}
```

### Options API Usage
```php
/**
 * Save plugin settings.
 *
 * @param array $settings The settings to save.
 * @return bool True on success, false on failure.
 */
function prefix_save_settings( $settings ) {
    // Validate settings
    $validated_settings = array();
    
    // Validate and sanitize each setting
    if ( isset( $settings['api_key'] ) ) {
        $validated_settings['api_key'] = sanitize_text_field( $settings['api_key'] );
    }
    
    if ( isset( $settings['enable_feature'] ) ) {
        $validated_settings['enable_feature'] = (bool) $settings['enable_feature'];
    }
    
    if ( isset( $settings['max_items'] ) ) {
        $validated_settings['max_items'] = absint( $settings['max_items'] );
    }
    
    // Save settings
    $updated = update_option( 'prefix_plugin_settings', $validated_settings );
    
    // Clear transients when settings change
    if ( $updated ) {
        delete_transient( 'prefix_api_response' );
    }
    
    return $updated;
}

/**
 * Get plugin settings.
 *
 * @return array The plugin settings.
 */
function prefix_get_settings() {
    // Get settings with defaults
    $defaults = array(
        'api_key'        => '',
        'enable_feature' => false,
        'max_items'      => 10,
    );
    
    $settings = get_option( 'prefix_plugin_settings', array() );
    
    return wp_parse_args( $settings, $defaults );
}
```

### WP_Filesystem Usage
```php
/**
 * Write content to a file using WP_Filesystem.
 *
 * @param string $file    The file path.
 * @param string $content The content to write.
 * @return bool|WP_Error True on success, WP_Error on failure.
 */
function prefix_write_to_file( $file, $content ) {
    // Initialize WP_Filesystem
    global $wp_filesystem;
    
    if ( ! function_exists( 'WP_Filesystem' ) ) {
        require_once ABSPATH . 'wp-admin/includes/file.php';
    }
    
    $creds = request_filesystem_credentials( site_url() );
    
    // Check if we have credentials
    if ( false === $creds ) {
        return new WP_Error( 'fs_credentials', __( 'Failed to get filesystem credentials.', 'textdomain' ) );
    }
    
    // Initialize the filesystem
    if ( ! WP_Filesystem( $creds ) ) {
        return new WP_Error( 'fs_init', __( 'Failed to initialize filesystem.', 'textdomain' ) );
    }
    
    // Create directory if it doesn't exist
    $dir = dirname( $file );
    if ( ! $wp_filesystem->is_dir( $dir ) ) {
        if ( ! $wp_filesystem->mkdir( $dir, FS_CHMOD_DIR ) ) {
            return new WP_Error( 'fs_mkdir', __( 'Failed to create directory.', 'textdomain' ) );
        }
    }
    
    // Write the file
    $result = $wp_filesystem->put_contents( $file, $content, FS_CHMOD_FILE );
    
    if ( false === $result ) {
        return new WP_Error( 'fs_write', __( 'Failed to write file.', 'textdomain' ) );
    }
    
    return true;
}
```

### HTTP API Usage
```php
/**
 * Make an API request using WordPress HTTP API.
 *
 * @param string $endpoint The API endpoint.
 * @param array  $args     Optional. Request arguments.
 * @return array|WP_Error Response data on success, WP_Error on failure.
 */
function prefix_api_request( $endpoint, $args = array() ) {
    // Get settings
    $settings = prefix_get_settings();
    $api_key = $settings['api_key'];
    
    // Check for API key
    if ( empty( $api_key ) ) {
        return new WP_Error( 'missing_api_key', __( 'API key is required.', 'textdomain' ) );
    }
    
    // Set up request arguments
    $request_args = wp_parse_args(
        $args,
        array(
            'timeout'     => 30,
            'redirection' => 5,
            'httpversion' => '1.1',
            'user-agent'  => 'WordPress/' . get_bloginfo( 'version' ) . '; ' . get_bloginfo( 'url' ),
            'headers'     => array(
                'Authorization' => 'Bearer ' . $api_key,
                'Accept'        => 'application/json',
            ),
        )
    );
    
    // Make the request
    $response = wp_remote_get( $endpoint, $request_args );
    
    // Check for errors
    if ( is_wp_error( $response ) ) {
        return $response;
    }
    
    // Check response code
    $response_code = wp_remote_retrieve_response_code( $response );
    if ( 200 !== $response_code ) {
        return new WP_Error(
            'api_error',
            sprintf(
                /* translators: %d: HTTP response code */
                __( 'API request failed with code %d.', 'textdomain' ),
                $response_code
            )
        );
    }
    
    // Parse response body
    $body = wp_remote_retrieve_body( $response );
    $data = json_decode( $body, true );
    
    if ( null === $data && JSON_ERROR_NONE !== json_last_error() ) {
        return new WP_Error( 'json_parse_error', __( 'Failed to parse API response.', 'textdomain' ) );
    }
    
    return $data;
}

/**
 * Get API data with caching.
 *
 * @param string $endpoint The API endpoint.
 * @param array  $args     Optional. Request arguments.
 * @param int    $cache    Optional. Cache time in seconds. Default 3600 (1 hour).
 * @return array|WP_Error Response data on success, WP_Error on failure.
 */
function prefix_get_api_data( $endpoint, $args = array(), $cache = 3600 ) {
    // Generate cache key
    $cache_key = 'prefix_api_' . md5( $endpoint . serialize( $args ) );
    
    // Check for cached data
    $cached_data = get_transient( $cache_key );
    
    if ( false !== $cached_data ) {
        return $cached_data;
    }
    
    // Make the API request
    $response = prefix_api_request( $endpoint, $args );
    
    // Cache successful responses
    if ( ! is_wp_error( $response ) ) {
        set_transient( $cache_key, $response, $cache );
    }
    
    return $response;
}
```